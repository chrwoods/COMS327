Changelog:

01/30/2019 - began map generator, completed function allowing for seeding and room generation

02/01/2019 - finished map generator, completed initial corridor building function which would just connect room 1 with 2, room 2 with 3, and continue until all rooms were connected. This scrapped and replaced with a new method that calculated euclidean distances between each room to pick where corridors go, making map a lot cleaner. Also added a line at the bottom that prints out the seed used (even if a seed is given when the program is run), and added up and down staircases. Also added hardness values in the map in preparation for the second assignment.

02/05/2019 - added flag detection for mapgen.c, with "--save", "--load", and "--seed <seed number>". Began work on save_map and load_map functions.

02/07/2019 - almost completed saving and loading functions, had error with room pointer however writing and reading format is completed. obj struct was added with a col and a row field to give the position of the object, which can be either a staircase or the player character. Added placement of the character with the '@' symbol, and fixed a bug where the position of the player character wasn't being written to the file, so the entire file became byte shifted by two.

02/08/2019 - fixed rooms pointer array to allocate in main function and reallocate based on number of rooms in the respective functions. fixed bug where filename was being concatenated twice, so saving and loading would give a seg fault. Changed load_map function to output a pointer to the room array to fix strange bug where rooms would be zero. Removed debug statements and updated README file.

02/14/2019 - completely restructured entire codebase. moved all defined constants and structs into a header named "structs.h". Moved all map generation functions into header "mapgen.h", and moved loading and saving functions into header "mapsl.h". Also created struct "dungeon" containing the map grid, the rooms, the stairs, and the player character, essentially making this into more of an object-oriented program. This complete restructure allows for reusing functions in other programs, making everything much more convenient, and will make the inevitable conversion to C++ much easier. Updated makefile accordingly.

02/15/2019 - began building priorityq.h and pathing.h which are a min priority queue and a header containing the functions to implement pathing, respectively. Methods to make weighting for a non-tunneling monster, printing out the path modulo 10, and to run Dijkstra's method were all implemented. Priority queue had issues.

02/20/2019 - finally fixed issue with priority queue after multiple days, inserting with prioirity had problem where nodes were being swapped but previous nodes were not being changed. Tunneling weighting function was added to pathing.h and a few extra bugs were squashed, allowing pathing to fully work. Functionality to make unreachable nodes display an 'X' was added, and one file called "mapandpath.c" was built to contain all features as of yet. All memory leaks were eliminated. Makefile and README were updated accordingly for submission. And perhaps most important change was made so far, where all instances of word "tunnelling" was replaced with "tunneling" because apparently I was spelling it wrong.

02/25/2019 - spent all day trying to build a generic priority queue using void pointers. I ran into enough issues where I decided to postpone it for another day. Added structs and constants relating to monsters, including constants for each monster characteristic along with default number of monsters and player speed. Also changed dungeon struct to include two 2D arrays holding tunneling and non-tunneling paths. Built an empty_map function in mapgen.h to deallocate all dynamically freed parts of a dungeon struct.

02/26/2019 - began building danger.h, which holds generate_monster function and move function. Move function was mostly finished, and although it had a few bugs, it worked pretty well. All characteristics were implemented, and mapandpath.c was adapted to generate, and repeatedly print and move the monsters.

02/27/2019 - completed danger.h, adding functionality for death, including a kill_monster function for when the monster is landed on, and sections in the move function to check and kill monsters and/or the player. Created monstermap.c to control game flow and end when either all players or monsters are dead. Since the generic priority queue is on hold, priorityq2.h was created to emulate the original priority queue with different data types and slightly different functionality. Makefile and README were updated.

03/05/2019 - rebuilt priorityq.h to be generic, using built in memory functions and void pointers, and updated every instance of using the queue accordingly.

03/10/2019 - created line-of-sight algorithm based on Bresenham's line algorithm, which draws a straight line across the map from the monster to the player and checks if there is any terrain in the way. Built ascii.h which contains the ascii art for both a tombstone for a lost game, and a treasure chest for a won game. Added a peek method to the queue to look at the top element in the queue. Changed the game to output the ascii when it is over, and added new path generation owhen the PC moves.

03/11/2019 - converted everything to use ncurses, deprecated old print_map function. Attempted to use the WINDOW object in order to do this. Added print_monster_list to danger.h to print the monster list, and stole the ASCII for it from the internet. Created hero.h to handle player movement and drats.h to handle ncurses. Added user input handling into hero.h.

03/12/2019 - troubleshooted WINDOW object problems where it wouldn't render on initialization.

03/13/2019 - threw WINDOW object usage directly into the garbage can and switched to using standard screen (stdscr), which fixed all bugs instantly. Finished hero.h to handle player movement, and added error output. Changed mapgen.h to be able to generate a map around the player character for staircase functionality. Currently is not persistent, this will be changed later. Added page counting for the monster list. Updated README and Makefile.

03/25/2019 - changed every single file to C++, changing all structs to classes and (almost) all functions to class functions. This resulted in the deletetion of mapandpath.c and monstermap.c, since they didn't use ncurses but the monster methods do, which was too tedious to fix, especially since it was just the maintenance of old programs, so they were removed. Also made the Makefile much fancier to include constants, including a fancy string that makes every make rule include all of the header files automatically.

03/26/2019 - added fog of war, including new print functions in drats.h and new variables into the Dungeon class, remembered terrain, a boolean for whether fog is on or off, and currently visible spots on the map. Added teleport function to hero.h, plus functionality for the 't' and 'f' keys into pc_turn.

03/27/2019 - fixed a bug that froze the game when an erratic monster tried to move while the player was in a wall. Updated README.

04/01/2019 - finished entire game. Haha, april fools... gotcha. Anyways, added color to the dungeon, so that remembered terrain would render as gray instead of white, so only currently visible terrain is white. This isn't part of any current assignment, but I saw it in one of Sheaffer's demos and it looked cool, so I implemented it.

04/02/2019 - began writing the loading of monsters into a header called loader.h. This also resulted in the creation of testload.cpp in order to test the loading of the monsters. Loading was mostly completed, save for printing the output for the gracious TAs, and reading in abilities.

04/03/2019 - finished writing the loading of monsters and wrote functions to print the stored data. I was running into segfaults, but according to literally everyone on stackexchange I was being stupid for using a pointer array of classes, so I switched to a vector to hold the monsters and hooray, no more sefaults. I had extra time, so I wrote the item loading and printing as well. I copied testload.cpp to rlg327.cpp for the ease of grading, and updated the Makefile and README accordingly.

04/08/2019 - created Collectible and Lifeform classes to act as instances of Items and Monsters, respectively. Updated all files to work with the new Monster schema, including fixing movement and print functions. Changed monsters to print in color, and added support for generating them uniquely.

04/09/2019 - implemented the generation of items through itemize.h, added the printing of items on the map. Added stack functioinality if items are on top of eachother on the map. Added --numitem flag which functions nearly identically to --nummon, save for updating items instead of monsters.

04/10/2019 - fixed a few miscellaneous bugs including an annoying off-by-one error, added functionality for pass-through and destroy attributes of a monster (pickup will be implemented next week). Updated functionality for regeneration on staircase use. Copied colorful.cpp to rlg327.cpp for ease of grading. Updated Makefile and README.
